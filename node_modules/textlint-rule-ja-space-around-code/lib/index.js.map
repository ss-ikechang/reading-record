{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isJapaneseChar = (text) => {\n    return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])$/.test(text);\n};\nconst defaultOptions = {\n    \"before\": false,\n    \"after\": false\n};\nfunction reporter(context, options) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const allowBeforeSpace = options.before || defaultOptions.before;\n    const allowAfterSpace = options.after || defaultOptions.after;\n    return {\n        [Syntax.Code](node){\n            const nodeText = getSource(node);\n            // |  `code`  |\n            // InlineCodeの前後2文字文を取得\n            // スペース + 前後の文字を取るため\n            // 文字が日本語以外はチェック対象にしないようにするため\n            const textWithPadding = getSource(node, 2, 2);\n            if (!textWithPadding) {\n                return;\n            }\n            const beforeChar = textWithPadding[1];\n            const beforeBeforeChar = textWithPadding[0];\n            const existBeforeChar = nodeText[0] !== beforeChar;\n            const afterChar = textWithPadding[textWithPadding.length - 2];\n            const afterAfterChar = textWithPadding[textWithPadding.length - 1];\n            const existAfterChar = nodeText[textWithPadding.length - 1] !== afterChar;\n            // InlineCodeの前に文字が存在している時のみチェック\n            if (existBeforeChar) {\n                if (allowBeforeSpace) {\n                    if (beforeChar !== \" \" && isJapaneseChar(beforeChar)) {\n                        report(node, new RuleError(\"インラインコードの前にスペースを入れてください。\", {\n                            index: -1,// before `\n                            fix: fixer.insertTextBeforeRange([0, 0], \" \")\n                        }));\n                    }\n                } else {\n                    if (beforeChar === \" \" && isJapaneseChar(beforeBeforeChar)) {\n                        report(node, new RuleError(\"インラインコードの前にスペースを入れません。\", {\n                            index: -1, // before `\n                            fix: fixer.replaceTextRange([-1, 0], \"\")\n                        }));\n                    }\n                }\n            }\n            // InlineCodeの後に文字が存在している時のみチェック\n            if (existAfterChar) {\n                if (allowAfterSpace) {\n                    if (afterChar !== \" \" && isJapaneseChar(beforeChar)) {\n                        report(node, new RuleError(\"インラインコードの後にスペースを入れてください。\", {\n                            index: nodeText.length,\n                            fix: fixer.insertTextAfterRange([0, nodeText.length], \" \")\n                        }));\n                    }\n                } else {\n                    if (afterChar === \" \" && isJapaneseChar(afterAfterChar)) {\n                        report(node, new RuleError(\"インラインコードの後にスペースを入れません。\", {\n                            index: nodeText.length + 1,\n                            fix: fixer.replaceTextRange([nodeText.length, nodeText.length + 1], \"\")\n                        }));\n                    }\n                }\n            }\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}