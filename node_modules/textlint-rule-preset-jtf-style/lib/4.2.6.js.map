{"version":3,"sources":["../src/4.2.6.js"],"names":["rx","module","exports","context","Syntax","RuleError","report","getSource","Str","node","text","rightMatches","japaneseRegExp","leftMatches","matches","forEach","match","index"],"mappings":"AAAA;AACA;AACA;;;;;;;AAMA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,EAAE,GAAG,mBAAK,GAAL,CAAX;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAAA,MACzBC,MADyB,GACgBD,OADhB,CACzBC,MADyB;AAAA,MACjBC,SADiB,GACgBF,OADhB,CACjBE,SADiB;AAAA,MACNC,MADM,GACgBH,OADhB,CACNG,MADM;AAAA,MACEC,SADF,GACgBJ,OADhB,CACEI,SADF;AAE/B,6BACKH,MAAM,CAACI,GADZ,YACiBC,IADjB,EACuB;AACf,QAAI,CAAC,iCAAkBA,IAAlB,EAAwBN,OAAxB,CAAL,EAAuC;AACnC;AACH;;AACD,QAAIO,IAAI,GAAGH,SAAS,CAACE,IAAD,CAApB,CAJe,CAKf;AACA;;AACA,QAAME,YAAY,GAAG,sCAAqBD,IAArB,EAA2BV,EAA3B,oBAAgCY,sBAAhC,EAArB,CAPe,CAQf;;AACA,QAAMC,WAAW,GAAG,sCAAqBH,IAArB,EAA2BV,EAA3B,qBAAoCY,sBAApC,EAApB;AACA,QAAME,OAAO,GAAG,2BAAaD,WAAb,EAA0BF,YAA1B,CAAhB;AACAG,IAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AAAA,UACbC,KADa,GACHD,KADG,CACbC,KADa;AAErBX,MAAAA,MAAM,CACFG,IADE,EAEF,IAAIJ,SAAJ,kRAGI;AACIY,QAAAA,KAAK,EAAEA;AADX,OAHJ,CAFE,CAAN;AAUH,KAZD;AAaH,GAzBL;AA2BH,CA7BD","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.2.6.ハイフン(-)\n原則として和文ではハイフン(-)を使用しません。\n使用する場合は半角で表記します。原文でハイフンが使われている場合も、和文では使用しません。\n例外は、住所や電話番号の区切りに使う場合です。\n */\nimport { isUserWrittenNode } from \"./util/node-util\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport regx from \"regx\";\nimport { japaneseRegExp } from \"./util/regexp\";\nimport mergeMatches from \"./util/merge-matches\";\nconst rx = regx(\"g\");\nmodule.exports = function(context) {\n    let { Syntax, RuleError, report, getSource } = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            // 和文ではハイフン(-)を使用しません\n            // right\n            const rightMatches = matchCaptureGroupAll(text, rx`${japaneseRegExp}(\\-)`);\n            // left\n            const leftMatches = matchCaptureGroupAll(text, rx`(\\-)${japaneseRegExp}`);\n            const matches = mergeMatches(leftMatches, rightMatches);\n            matches.forEach(match => {\n                const { index } = match;\n                report(\n                    node,\n                    new RuleError(\n                        `原則として和文ではハイフン(-)を使用しません。\n例外は、住所や電話番号の区切りに使う場合です。`,\n                        {\n                            index: index\n                        }\n                    )\n                );\n            });\n        }\n    };\n};\n"],"file":"4.2.6.js"}