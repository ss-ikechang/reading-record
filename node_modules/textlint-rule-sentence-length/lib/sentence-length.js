// LICENSE : MIT
"use strict";

var _sentenceSplitter = require("sentence-splitter");

var _textlintUtilToString = require("textlint-util-to-string");

var _textlintRuleHelper = require("textlint-rule-helper");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
  max: 100
};

module.exports = function (context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var maxLength = options.max || defaultOptions.max;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  var Syntax = context.Syntax,
      RuleError = context.RuleError,
      report = context.report; // toPlainText

  return _defineProperty({}, Syntax.Paragraph, function (node) {
    if (helper.isChildNode(node, [Syntax.BlockQuote])) {
      return;
    } // If a single Link node in the paragraph node, should be ignore the link length


    var isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;

    if (isChildrenSingleLinkNode) {
      return;
    } // empty break line == split sentence


    var paragraph = (0, _sentenceSplitter.splitAST)(node);
    paragraph.children.filter(function (sentence) {
      return sentence.type === _sentenceSplitter.Syntax.Sentence;
    }).forEach(function (sentence) {
      var source = new _textlintUtilToString.StringSource(sentence);
      var sentenceText = source.toString(); // larger than > 100

      var sentenceLength = sentenceText.length;

      if (sentenceLength > maxLength) {
        var startLine = sentence.loc.start.line;
        report(sentence, new RuleError("Line ".concat(startLine, " sentence length(").concat(sentenceLength, ") exceeds the maximum sentence length of ").concat(maxLength, ".\nOver ").concat(sentenceLength - maxLength, " characters.")));
      }
    });
  });
};
//# sourceMappingURL=sentence-length.js.map