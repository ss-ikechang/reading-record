{"version":3,"sources":["../src/sentence-length.js"],"names":["defaultOptions","max","module","exports","context","options","maxLength","helper","RuleHelper","Syntax","RuleError","report","Paragraph","node","isChildNode","BlockQuote","isChildrenSingleLinkNode","children","length","type","Link","paragraph","filter","sentence","SentenceSyntax","Sentence","forEach","source","StringSource","sentenceText","toString","sentenceLength","startLine","loc","start","line"],"mappings":"AAAA;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,GAAG,EAAE;AADc,CAAvB;;AAGAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAgC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC7C,MAAMC,SAAS,GAAGD,OAAO,CAACJ,GAAR,IAAeD,cAAc,CAACC,GAAhD;AACA,MAAMM,MAAM,GAAG,IAAIC,8BAAJ,CAAeJ,OAAf,CAAf;AAF6C,MAGrCK,MAHqC,GAGPL,OAHO,CAGrCK,MAHqC;AAAA,MAG7BC,SAH6B,GAGPN,OAHO,CAG7BM,SAH6B;AAAA,MAGlBC,MAHkB,GAGPP,OAHO,CAGlBO,MAHkB,EAI7C;;AACA,6BACKF,MAAM,CAACG,SADZ,YACuBC,IADvB,EAC6B;AACrB,QAAIN,MAAM,CAACO,WAAP,CAAmBD,IAAnB,EAAyB,CAACJ,MAAM,CAACM,UAAR,CAAzB,CAAJ,EAAmD;AAC/C;AACH,KAHoB,CAIrB;;;AACA,QAAMC,wBAAwB,GAAGH,IAAI,CAACI,QAAL,CAAcC,MAAd,KAAyB,CAAzB,IAA8BL,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBE,IAAjB,KAA0BV,MAAM,CAACW,IAAhG;;AACA,QAAIJ,wBAAJ,EAA8B;AAC1B;AACH,KARoB,CASrB;;;AACA,QAAMK,SAAS,GAAG,gCAASR,IAAT,CAAlB;AACAQ,IAAAA,SAAS,CAACJ,QAAV,CAAmBK,MAAnB,CAA0B,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACJ,IAAT,KAAkBK,yBAAeC,QAArC;AAAA,KAAlC,EAAiFC,OAAjF,CAAyF,UAAAH,QAAQ,EAAI;AACjG,UAAMI,MAAM,GAAG,IAAIC,kCAAJ,CAAiBL,QAAjB,CAAf;AACA,UAAMM,YAAY,GAAGF,MAAM,CAACG,QAAP,EAArB,CAFiG,CAGjG;;AACA,UAAMC,cAAc,GAAGF,YAAY,CAACX,MAApC;;AACA,UAAIa,cAAc,GAAGzB,SAArB,EAAgC;AAC5B,YAAM0B,SAAS,GAAGT,QAAQ,CAACU,GAAT,CAAaC,KAAb,CAAmBC,IAArC;AACAxB,QAAAA,MAAM,CACFY,QADE,EAEF,IAAIb,SAAJ,gBAAsBsB,SAAtB,8BAAmDD,cAAnD,sDAA6GzB,SAA7G,qBACjByB,cAAc,GAAGzB,SADA,kBAFE,CAAN;AAKH;AACJ,KAbD;AAcH,GA1BL;AA4BH,CAjCD","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { splitAST, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\nimport { RuleHelper } from \"textlint-rule-helper\";\n\nconst defaultOptions = {\n    max: 100\n};\nmodule.exports = function(context, options = {}) {\n    const maxLength = options.max || defaultOptions.max;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report } = context;\n    // toPlainText\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            // If a single Link node in the paragraph node, should be ignore the link length\n            const isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;\n            if (isChildrenSingleLinkNode) {\n                return;\n            }\n            // empty break line == split sentence\n            const paragraph = splitAST(node);\n            paragraph.children.filter(sentence => sentence.type === SentenceSyntax.Sentence).forEach(sentence => {\n                const source = new StringSource(sentence);\n                const sentenceText = source.toString();\n                // larger than > 100\n                const sentenceLength = sentenceText.length;\n                if (sentenceLength > maxLength) {\n                    const startLine = sentence.loc.start.line;\n                    report(\n                        sentence,\n                        new RuleError(`Line ${startLine} sentence length(${sentenceLength}) exceeds the maximum sentence length of ${maxLength}.\nOver ${sentenceLength - maxLength} characters.`)\n                    );\n                }\n            });\n        }\n    };\n};\n"],"file":"sentence-length.js"}