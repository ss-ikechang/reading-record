// LICENSE : MIT
"use strict";
/*
 全角文字と半角文字の間
 全角文字どうしの間にスペースを入れません。
 ただしカタカナ複合語の場合を除きます。
 */

var _templateObject = _taggedTemplateLiteral(["", "( )", ""], ["", "( )", ""]);

var _textlintRuleHelper = require("textlint-rule-helper");

var _matchIndex = require("match-index");

var _regx = require("regx");

var _regx2 = _interopRequireDefault(_regx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var rx = (0, _regx2.default)("g");
var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/;

function reporter(context) {
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var fixer = context.fixer;
    var getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper();
    return _defineProperty({}, Syntax.Str, function (node) {
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        var text = getSource(node);
        // 全角同士の間は半角スペースを入れない
        var matchReg = rx(_templateObject, japaneseRegExp, japaneseRegExp);
        var katakakana = /[ァ-ヶ]( )[ァ-ヶ]/;
        (0, _matchIndex.matchAll)(text, matchReg).forEach(function (match) {
            var input = match.input;
            var captureGroups = match.captureGroups;
            // ただしカタカナ複合語の場合を除きます。

            if (katakakana.test(input)) {
                return;
            }
            captureGroups.forEach(function (captureGroup) {
                var index = captureGroup.index;
                report(node, new RuleError("原則として、全角文字どうしの間にスペースを入れません。", {
                    index: index,
                    fix: fixer.replaceTextRange([index, index + 1], "")
                }));
            });
        });
    });
}
module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=index.js.map