{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/*\n 全角文字と半角文字の間にスペースを入れるかどうか\n */\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {matchCaptureGroupAll} from \"match-index\";\nconst PunctuationRegExp = /[。、]/;\nconst defaultOptions = {\n    // スペースを入れるかどうか\n    // \"never\" or \"always\"\n    space: \"never\",\n    // [。、,.]を例外とするかどうか\n    exceptPunctuation: true\n};\nfunction reporter(context, options = {}) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const helper = new RuleHelper();\n    const spaceOption = options.space || defaultOptions.space;\n    const exceptPunctuation = options.exceptPunctuation !== undefined\n        ? options.exceptPunctuation\n        : defaultOptions.exceptPunctuation;\n    assert(spaceOption === \"always\" || spaceOption === \"never\", `\"space\" options should be \"always\" or \"never\".`);\n    /**\n     * `text`を対象に例外オプションを取り除くfilter関数を返す\n     * @param {string} text テスト対象のテキスト全体\n     * @param {number} padding +1 or -1\n     * @returns {function(*, *)}\n     */\n    const createFilter = (text, padding) => {\n        /**\n         * `exceptPunctuation`で指定された例外を取り除く\n         * @param {Object} match\n         * @returns {boolean}\n         */\n        return (match) => {\n            const targetChar = text[match.index + padding];\n            if (!targetChar) {\n                return false;\n            }\n            if (exceptPunctuation && PunctuationRegExp.test(targetChar)) {\n                return false;\n            }\n            return true;\n        }\n    };\n    // Never: アルファベットと全角の間はスペースを入れない\n    const noSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, /[A-Za-z0-9]([ 　])(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/);\n        const betweenZenAndHan = matchCaptureGroupAll(text, /(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])([ 　])[A-Za-z0-9]/);\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れません。\", {\n                index: match.index,\n                fix: fixer.replaceTextRange([index, index + 1], \"\")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, -1)).forEach(reportMatch);\n    };\n\n    // Always: アルファベットと全角の間はスペースを入れる\n    const needSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, /([A-Za-z0-9])(?:[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/);\n        const betweenZenAndHan = matchCaptureGroupAll(text, /([、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])[A-Za-z0-9]/);\n        const reportMatch = (match) => {\n            const {index} = match;\n            report(node, new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れます。\", {\n                index: match.index,\n                fix: fixer.replaceTextRange([index + 1, index + 1], \" \")\n            }));\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, 0)).forEach(reportMatch);\n    };\n    return {\n        [Syntax.Str](node){\n            const isIgnoredParentNode = helper.isChildNode(node, [\n                Syntax.Header, Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis\n            ]);\n            if (isIgnoredParentNode) {\n                return;\n            }\n            const text = getSource(node);\n\n            if (spaceOption === \"always\") {\n                needSpaceBetween(node, text)\n            } else if (spaceOption === \"never\") {\n                noSpaceBetween(node, text);\n            }\n\n        }\n    }\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};"]}