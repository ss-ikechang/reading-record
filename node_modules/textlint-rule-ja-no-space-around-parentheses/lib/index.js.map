{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;;;;;AAIA;;AACA;;;;AAEA,IAAM,WAAW,CACb,KADa,EACN,KADM,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,GAD/B,EACoC,GADpC,CAAjB;;AAIA,IAAM,eAAe,SAAS,GAAT,CAAa,mBAAW;AACzC,WAAO,IAAI,MAAJ,CAAW,aAAa,OAAxB,EAAiC,GAAjC,CAAP;AACH,CAFoB,CAArB;AAGA,IAAM,gBAAgB,SAAS,GAAT,CAAa,mBAAW;AAC1C,WAAO,IAAI,MAAJ,CAAW,UAAU,SAArB,EAAgC,GAAhC,CAAP;AACH,CAFqB,CAAtB;AAGA,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AAAA,QAChB,MADgB,GAC+B,OAD/B,CAChB,MADgB;AAAA,QACR,SADQ,GAC+B,OAD/B,CACR,SADQ;AAAA,QACG,MADH,GAC+B,OAD/B,CACG,MADH;AAAA,QACW,KADX,GAC+B,OAD/B,CACW,KADX;AAAA,QACkB,SADlB,GAC+B,OAD/B,CACkB,SADlB;;AAEvB,QAAM,SAAS,oCAAf;AACA,+BACK,OAAO,GADZ,YACiB,IADjB,EACsB;AACd,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,IAAR,EAAc,OAAO,KAArB,EAA4B,OAAO,UAAnC,EAA+C,OAAO,QAAtD,CAAzB,CAAJ,EAA+F;AAC3F;AACH;AACD,YAAM,OAAO,UAAU,IAAV,CAAb;AACA;AACA,qBAAa,OAAb,CAAqB,mBAAW;AAC5B,kDAAqB,IAArB,EAA2B,OAA3B,EAAoC,OAApC,CAA4C,iBAAS;AAAA,oBAC1C,KAD0C,GACjC,KADiC,CAC1C,KAD0C;;AAEjD,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,yBAAd,EAAyC;AAClD,2BAAO,KAD2C;AAElD,yBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,CAAhB,CAAvB,EAA2C,EAA3C;AAF6C,iBAAzC,CAAb;AAIH,aAND;AAOH,SARD;AASA;AACA,sBAAc,OAAd,CAAsB,mBAAW;AAC7B,kDAAqB,IAArB,EAA2B,OAA3B,EAAoC,OAApC,CAA4C,iBAAS;AAAA,oBAC1C,KAD0C,GAC3B,KAD2B,CAC1C,KAD0C;AAAA,oBACnC,IADmC,GAC3B,KAD2B,CACnC,IADmC;;AAEjD,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,yBAAd,EAAyC;AAClD,2BAAO,KAD2C;AAElD,yBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,CAAhB,CAAvB,EAA2C,EAA3C;AAF6C,iBAAzC,CAAb;AAIH,aAND;AAOH,SARD;AASH,KA1BL;AA4BH;AACD,OAAO,OAAP,GAAiB;AACb,YAAQ,QADK;AAEb,WAAO;AAFM,CAAjB","file":"index.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n かっこ類と隣接する文字の間のスペースの有無\n かっこの外側、内側ともにスペースを入れません。\n */\nimport {RuleHelper} from \"textlint-rule-helper\";\nimport {matchCaptureGroupAll} from \"match-index\";\n\nconst brackets = [\n    \"\\\\[\", \"\\\\]\", \"（\", \"）\", \"［\", \"］\", \"「\", \"」\", \"『\", \"』\"\n];\n\nconst leftBrackets = brackets.map(bracket => {\n    return new RegExp(\"\\([ 　]\\)\" + bracket, \"g\");\n});\nconst rightBrackets = brackets.map(bracket => {\n    return new RegExp(bracket + \"\\([ 　])\", \"g\");\n});\nfunction reporter(context) {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const helper = new RuleHelper();\n    return {\n        [Syntax.Str](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const text = getSource(node);\n            // 左にスペース\n            leftBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const {index} = match;\n                    report(node, new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n            // 右にスペース\n            rightBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const {index, text} = match;\n                    report(node, new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"]}